text   <- string:blob (object:object text:text
                       / tag:tag text:text
                     % / open_tag:open_tag text:text
                       / open_object:open_object text:text)? ~;
blob   <- (!open_object !open_tag .)* `iolist_to_binary(Node)`;
object <- open_object:open_object space (argument:argument filters:filters / argument:argument)? space close_object:close_object `
case Node of
  [_, _, Block, _, _] -> lists:flatten([Block])
end
`;
tag <- cond_if_tag / cond_unless_tag ~;

cond_if_tag <- if_tag
               elsif_tag*
               else_tag?
               open_tag space endif space close_tag `
case Node of
  [IfExp, [], [], _, _, _EndIf, _, _] -> [IfExp];
  [IfExp, [], ElseExp, _, _, _EndIf, _, _] -> [IfExp, ElseExp];
  [IfExp, Elsifs, [], _, _, _EndIf, _, _] -> [IfExp, {elsif_exps, Elsifs}];
  [IfExp, Elsifs, ElseExp, _, _, _EndIf, _, _] -> [IfExp, Elsifs, ElseExp]
end
`;

if_tag <- open_tag space if expression:boolean_expression close_tag text:text `
case Node of
  [_, _, _If, Exp, _, Text] -> {if_exp, [Exp, Text]}
end
`;

elsif_tag <- open_tag space elsif expression:boolean_expression close_tag text:text `
case Node of
  [_, _, _Elsif, Exp, _, Text] -> {elsif_exp, [Exp, Text]}
end
`;

else_tag <- (open_tag space else space close_tag text:text) `
case Node of
  [_, _, _Else, _, _, ElseText] -> {else_exp, [ElseText]}
end
`;

unless_tag <- open_tag space unless expression:boolean_expression close_tag text:text `
case Node of
  [_, _, _Unless, Exp, _, Text] -> {unless_exp, [Exp, Text]}
end
`;

cond_unless_tag <- unless_tag
                   elsif_tag*
                   else_tag?
                   open_tag space endunless space close_tag `
case Node of
  [UnlessExp, [], _, _, _EndUnless, _, _] -> [UnlessExp];
  [UnlessExp, [], ElseExp, _, _, _EndUnless, _, _] -> [UnlessExp, ElseExp];
  [UnlessExp, Elsifs, [], _, _, _EndUnless, _, _] -> [UnlessExp, {elsif_exps, Elsifs}];
  [UnlessExp, Elsifs, ElseExp, _, _, _EndUnless, _, _] -> [UnlessExp, Elsifs, ElseExp]
end
`;

expression <- space (argument space operator space argument / boolean) space `
case Node of
  [_, [Arg1, _, Op, _, Arg2], _] -> {Arg1, Op, Arg2};
  [_, Bool, _] -> Bool
end
`;

boolean_expression <- expression ((and / or) expression)* `
case Node of
  [Exp, Exps] -> [Exp | Exps]
end
`;

filters <- (space "|" space filter (":" space arguments)? )+`
[case N of
  [_, _, _, Filter, [_, _, Args]] -> {Filter, Args};
  [_, _, _, Filter, _] -> {Filter, []}
end || N <- Node]
`;
arguments <- argument (space "," space argument)* `
case Node of
  [Arg1, Args] -> [Arg1 | [Arg || [_, _, _, Arg] <- Args]]
end
`;
argument <- value:value / field:field ~;
value <- space (string / number / true / false / null) space `lists:nth(2, Node)`;
string <- single_quoted_string / double_quoted_string `
iolist_to_binary(proplists:get_value(string, Node))
`;

%% Terminals

operator       <- "==" / "!=" / ">" / "<" / ">=" / "<=" / "contains" `
  binary_to_existing_atom(Node, utf8)
`;
open_object    <- "{{" ~;
close_object   <- "}}" ~;
open_tag       <-  "{%" ~;
close_tag      <-  "%}" ~;
if             <- "if" ~;
else           <- "else" ~;
elsif          <- "elsif" ~;
endif          <- "endif" ~;
unless         <- "unless" ~;
endunless      <- "endunless" ~;
field          <- [0-9a-zA-Z\.]* `iolist_to_binary(Node)`;
filter         <- [a-zA-Z]* `iolist_to_binary(Node)`;
space          <- [ \t\n\s\r]* `{space, iolist_to_binary(Node)}`;

double_quoted_string <- '"' string:(!'"' ("\\\\" / '\\"' / .))* '"' ~;
single_quoted_string <- "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" ~;

number <- int frac? exp?
`
case Node of
  [Int, [], []] -> list_to_integer(binary_to_list(iolist_to_binary(Int)));
  [Int, Frac, []] -> list_to_float(binary_to_list(iolist_to_binary([Int, Frac])));
  [Int, [], Exp] -> list_to_float(binary_to_list(iolist_to_binary([Int, ".0", Exp])));
  _ -> list_to_float(binary_to_list(iolist_to_binary(Node)))
end
`;
int <- '-'? (non_zero_digit digit+) / digit ~;
frac <- '.' digit+ ~;
exp <- e digit+ ~;
e <- [eE] ('+' / '-')? ~;
non_zero_digit <- [1-9] ~;
digit <- [0-9] ~;
boolean <- true / false ~;
true <- 'true' `true`;
false <- 'false' `false`;
null <- 'nil' `nil`;
and <- 'and' `bool_and`;
or <- 'or' `bool_or`;
